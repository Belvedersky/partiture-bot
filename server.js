const fs = require("fs");
const getStat = require("util").promisify(fs.stat);

// https://expressjs.com/ru
const express = require("express");
const bodyParser = require("body-parser");
const app = express();

const { download, convert } = require("./utils");
const settings = JSON.parse(fs.readFileSync("response.json"));

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(express.static("public"));
app.set("view engine", "pug");

// https://www.npmjs.com/package/sqlite3
const sqlite3 = require("sqlite3").verbose();
const dbFile = process.env.DB;
const exists = fs.existsSync(dbFile);
const db = new sqlite3.Database(dbFile);

// https://telegraf.js.org/#/
const { Telegraf } = require("telegraf"); // telegram bot
const Telegram = require("telegraf/telegram"); // telegram

const bot = new Telegraf(process.env.TOKEN);
const telegram = new Telegram(process.env.TOKEN);
const { menuKeyboard } = require("./keyboards");

// init sqlite db
db.serialize(() => {
  if (!exists) {
    db.run(settings.sql.init);
    // console.log("New table Voices created!");
  }
  // else {
  //   console.log('Database "Voices" ready to go!');
  // }
});

// init bot
bot.use(async (ctx, next) => {
  const start = new Date();
  await next();
  const ms = new Date() - start;
  console.log("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞ %sms", ms);
});

// start
bot.start(ctx =>
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç ${ctx.chat.first_name}!\n` + settings.bot.start,
    menuKeyboard
  )
);

// help
bot.hears(settings.bot.keyboard.help, ctx => ctx.reply(settings.bot.help, menuKeyboard));


// on voice
// –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –ë–∞–∑—É –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ voice
bot.on("voice", ctx => {
  if (!process.env.DISALLOW_WRITE) {
    if (ctx.message.voice.duration < 1) {
      // –º–µ–Ω—å—à–µ —Å–µ–∫—É–Ω–¥—ã
      ctx.reply(settings.bot.error.duration_min, menuKeyboard);
    }
    if (ctx.message.voice.duration > 180) {
      // –±–æ–ª—å—à–µ 3 –º–∏–Ω—É—Ç
      ctx.reply(settings.bot.error.duration_max, menuKeyboard);
    } else {
      db.run(settings.sql.add, ctx.message.voice.file_id, error => {
        if (error) {
          ctx.reply(settings.bot.error.db, menuKeyboard);
        } else {
          console.log(ctx.message.voice.file_id);
          ctx.reply(settings.bot.save, menuKeyboard);
        }
      });
    }
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–π—Å–∞
bot.hears(settings.bot.keyboard.random, ctx => {
  // console.log(ctx);
  db.each(settings.sql.random, (err, row) => {
    ctx.reply(
      "–ö–∞–∫–æ–π —Ç–æ —Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ –∫–∞—Ä—Ç–∏–Ω–∫—É –º–æ–∂–Ω–æ –∏–º—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏ —Ç–¥ ",
      menuKeyboard
    );
    ctx.replyWithVoice(ctx.chat.id, {
      voice: row.voice
    });
    console.log(
      `Send ${row.voice} to ${ctx.chat.first_name} ${ctx.chat.last_name}`
    );
  });
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –Ω–æ—Ç–∞—Ü–∏–∏
bot.hears(settings.bot.keyboard.partiture, ctx => {
  ctx.reply(settings.bot.partiture, menuKeyboard);
  ctx.replyWithPhoto(ctx.chat.id, {
    photo:
      settings.partiture[Math.floor(Math.random() * settings.partiture.length)]
  });
});

/// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get("/", (req, res) => {
  res.sendFile(`${__dirname}/views/mainpage.html`);
});

/// change voice to random —Ç—É—Ç –±–µ—Ä–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–π id –∏–∑ –±–∞–∑—ã  ->
/// –ø–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ getFileLink -> —Å–∫–∞—á–∏–≤–∞–µ–º download ->
/// –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ webm –∏ wav —á—Ç–æ –±—ã —É –≤—Å–µ—Ö –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ
app.get("/randomize", (req, res) => {
  db.each(settings.sql.random, (err, row) => {
    telegram.getFileLink(row.voice).then(voiceLink => {
      download(voiceLink, "public/voice.oga", () => {
        convert(settings.convert + "webm"); // –∫–æ–Ω–≤–µ—Ä—Ç –≤ webm, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –Ω–µ –ø–æ–Ω–∏–º–∞—é—Ç .oga
        convert(settings.convert + "wav"); // –¥–ª—è safari üôÅ
        res.send("ok!"); // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–∞–Ω–∫–∏ —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Åonvert –∏ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –∏—Ö –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
      });
    });
  });
});

/// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—Ç–∏—Ç—É—Ä—ã –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
/// –ß—Ç–æ –±—ã –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –Ω–∞–¥–æ –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ vpn —Ç–∞–∫ –∫–∞–∫
/// —Ç–∞–º –∏–¥–µ—Ç —Å–∫–∞—á–∏–≤–∞–µ–Ω–∏–µ –∏–∑ –∞–ø–∏ —Ç–µ–ª–µ–≥–∏ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –±—Ä–∞—É–∑–µ—Ä –æ–ø–µ—Ä–∞
app.get("/voices", (req, res) => {});

/// –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∞—É–¥–∏–æ ‚Äì‚Äì –º–æ–∂–Ω–æ —Å–∫–∞—á–∏–≤–∞—Ç—å –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
/// http://cangaceirojavascript.com.br/streaming-audio-node/
const buffer = 2;

app.get("/audio", async (req, res) => {
  const filePath = `${__dirname}/public/voice.oga`;
  const stat = await getStat(filePath);
  console.log(stat);

  // –í –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –∞—É–¥–∏–æ
  res.writeHead(200, {
    "Content-Type": "audio/oga",
    "Content-Length": stat.size
  });
  //
  const stream = fs.createReadStream(filePath, { buffer });

  // –í –∫–æ–Ω—Ü–µ –ø–∏—à–µ–º done
  stream.on("end", () => console.log("done"));

  // –°—Ç—Ä–∏–º–∏–º –∞—É–¥–∏–æ
  stream.pipe(res);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(process.env.PORT, () => {
  console.log(`Your app is listening on port ${process.env.PORT}`);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.launch();
