// –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
const fs = require("fs");
const getStat = require("util").promisify(fs.stat);

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const { download, convert, randomImage } = require("./utils");
const settings = JSON.parse(fs.readFileSync("response.json"));

// https://www.npmjs.com/package/sqlite3
const sqlite3 = require("sqlite3").verbose();
const dbFile = process.env.DB;
const exists = fs.existsSync(dbFile);
const db = new sqlite3.Database(dbFile);

// https://telegraf.js.org/#/
//
const { Telegraf, Extra, Markup } = require("telegraf"); // telegram bot
const Telegram = require("telegraf/telegram"); // telegram
const bot = new Telegraf(process.env.TOKEN);
const telegram = new Telegram(process.env.TOKEN);

// app.use(bot.webhookCallback('/secret-path'))
// bot.telegram.setWebhook('https://instinctive-autumn-velvet.glitch.me/secret-path')

const express = require("express");
const bodyParser = require("body-parser");
const app = express();
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(express.static("public"));
app.set("view engine", "pug");
// app.use(bot.webhookCallback('/secret-path'))
// bot.telegram.setWebhook('https://instinctive-autumn-velvet.glitch.me/secret-path')


//–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const {
  menuKeyboard,
  menuKeyboardWithOutSend,
  exitKeyboard,
  agreementKey,
  randomizeKey,
  ranomizeVoice
} = require("./keyboards");

// –°—Å–µ—Å—Å–∏—è
const session = require("telegraf-session-sqlite");
const options = {
  db: db,
  table_name: "Session"
};

const Stage = require("telegraf/stage");
const Scene = require("telegraf/scenes/base");
const { enter, leave } = Stage;
const stage = new Stage();

// init sqlite db
db.serialize(() => {
  if (!exists) {
    db.run(settings.sql.initVoice);
    db.run(settings.sql.initPartiture);
    console.log("New tables Voices and Partitures created!");
  }
  // else {
  //   console.log('Database "Voices" ready to go!');
  // }
});

// C—Ü–µ–Ω–∞ —Å—Ç–∞—Ä—Ç–∞
const greeterScene = new Scene("greeter");

stage.register(greeterScene);

greeterScene.enter(ctx => {
  //console.log(ctx.scene.state);
  ctx.replyWithHTML(`–ü—Ä–∏–≤–µ—Ç, ${ctx.chat.first_name}!\n`);
  ctx.replyWithChatAction("typing");
  let i = 0;
  let interval = setInterval(function() {
    ctx.replyWithHTML(settings.bot.start[i]).then(() => {
      ctx.replyWithChatAction("typing");
    });
    i++;
    if (i === settings.bot.start.length) {
      clearInterval(interval);
      ctx.replyWithChatAction("typing");
      ctx.replyWithHTML(settings.bot.agree, agreementKey);
    }
  }, settings.bot.startDelay[i]);
});

greeterScene.action("agree", ctx => {
  ctx.scene.enter("root");
  ctx.scene.state.agree = "yes";
  ctx.answerCbQuery(`üéâ C—É–ø–µ—Ä! üéâ`);
  ctx.editMessageText(settings.bot.agree);

  ctx.reply(
    "C–ø–∞—Å–∏–±–æ! —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –æ–∑–≤—É—á–µ–Ω—ã–µ –Ω–æ—Ç–∞—Ü–∏–∏ üéº",
    menuKeyboard
  );
});

// greeterScene.action("disagree", ctx => {
//   ctx.answerCbQuery(`‚òπÔ∏è –û—á–µ–Ω—å –∂–∞–ª—å! ‚òπÔ∏è`);
// //    ctx.telegram.leaveChat(ctx.message.chat.id)
// });
greeterScene.command("restart", ctx => {
  ctx.scene.enter("greeter");
});

greeterScene.hears("exit", ctx => {
  ctx.scene.enter("root");
});

greeterScene.on(["text", "media", "sticker"], ctx => {
  // telegram.deleteMessage(ctx.chat.id, ctx.update.message.message_id);
  ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ");
});

const sendVoice = new Scene("sendVoice");

stage.register(sendVoice);

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –Ω–æ—Ç–∞—Ü–∏–∏

sendVoice.enter((ctx, next) => {
  //telegram.deleteMessage(ctx.chat.id, ctx.update.message.message_id);
  ctx.replyWithChatAction("upload_photo");
  const partiture = settings.partiture[randomImage(settings.partiture.length)];
  ctx.scene.state.image = partiture;
  ctx.replyWithPhoto({ url: partiture }, randomizeKey).then(() => {
    ctx.reply("–¢–µ–ø–µ—Ä—å –æ–∑–≤—É—á—å—Ç–µ –ø–∞—Ä—Ç–∏—Ç—É—Ä—É.", exitKeyboard);
  });
});

sendVoice.action("randomize", ctx => {
  let partiture = settings.partiture[randomImage(settings.partiture.length)];
  while (partiture === ctx.scene.state.image) {
    partiture = settings.partiture[randomImage(settings.partiture.length)];
  }
  settings.partiture[randomImage(settings.partiture.length)];
  ctx.scene.state.image = partiture;
  ctx.answerCbQuery(`üéº–ù–æ–≤–∞—è –ø–∞—Ä—Ç–∏—Ç—É—Ä–∞üé∂`).then(() => {
    ctx.editMessageMedia({ type: "photo", media: partiture }, randomizeKey);
  });
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id voice –≤ bd –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
// —Ç–∏–ø–∞ voice —Å duration > 1 –∏ < 180  1—Å–µ–∫ 3–º–∏–Ω
sendVoice.on("voice", ctx => {
  if (!process.env.DISALLOW_WRITE) {
    if (ctx.message.voice.duration < 1) {
      // –º–µ–Ω—å—à–µ —Å–µ–∫—É–Ω–¥—ã
      ctx.reply(settings.bot.error.duration_min);
    }
    if (ctx.message.voice.duration > 180) {
      // –±–æ–ª—å—à–µ 3 –º–∏–Ω—É—Ç
      ctx.reply(settings.bot.error.duration_max);
    } else {
      db.run(
        settings.sql.addVoice,
        ctx.message.voice.file_id,
        ctx.scene.state.image,
        parseInt(ctx.message.voice.duration),
        error => {
          if (error) {
            ctx.reply(settings.bot.error.db);
          } else {
            ctx.scene.state.voice = ctx.message.voice.file_id;
            //console.log(ctx.scene.state);
            ctx.reply(
              settings.bot.save,
              Extra.HTML().markup(m =>
                m.inlineKeyboard([
                  m.callbackButton(`@${ctx.from.username}`, "author"),
                  m.callbackButton("a–Ω–æ–Ω–∏–º–Ω–æ", "anonimous")
                ])
              )
            );
          }
        }
      );
    }
  }
});

sendVoice.action("author", ctx => {
  db.run(settings.sql.addAuthorVoice, ctx.from.username, ctx.scene.state.voice);
  ctx.answerCbQuery(`üéâüéâüéâ`);
  ctx.editMessageText(settings.bot.save);
  ctx.scene.enter("root");
  ctx.reply("C—É–ø–µ—Ä! –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –∑–∞–ø–∏—Å—å –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏! üôÉ", menuKeyboard);
});

sendVoice.action("anonimous", ctx => {
  ctx.answerCbQuery(`üï∂üï∂üï∂`);
  ctx.editMessageText(settings.bot.save);
  ctx.scene.enter("root");
  ctx.reply("–•–æ—Ä–æ—à–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –≤–∞—à—É –∑–∞–ø–∏—Å—å –∞–Ω–æ–Ω–∏–º–Ω–æ üòé", menuKeyboard);
});

sendVoice.hears(settings.bot.keyboard.mainMenu, ctx => {
  ctx.scene.enter("root");
  ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", menuKeyboard);
});

sendVoice.on(["text", "media", "sticker", "document"], ctx => {
  //telegram.deleteMessage(ctx.chat.id, ctx.update.message.message_id);
  ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", exitKeyboard);
});

const getVoice = new Scene("getVoice");
stage.register(getVoice);

const rootScene = new Scene("root");
stage.register(rootScene);

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–π—Å–∞
rootScene.hears(settings.bot.keyboard.randomVoice, (ctx, next) => {
  ctx.replyWithChatAction("upload_voice");
  ctx.scene.state.media ? false : ctx.scene.state.media;
  const sql = `SELECT * FROM Voices WHERE image IS NOT NULL ${ctx.scene.state.media ? "AND id != "+ ctx.scene.state.media : " "} ORDER BY RANDOM() LIMIT 1;`;
  db.each( sql, (err, row) => { 
    ctx.scene.state.media = row.id;
    // ctx.reply("C–ª—É—á–∞–π–Ω–∞—è –∑–∞–ø–∏—Å—å",menuKeyboard)
    ctx.replyWithPhoto({ url: row.image })
      .then(() => {
        ctx.replyWithVoice(row.voice,{
          caption: row.username ? `@${row.username}` : " ", //settings.bot.voice.text,
        })
      });
    // console.log(`Send ${row.voice} to ${ctx.chat.first_name} ${ctx.chat.last_name}`);
  });
});

// rootScene.on(["photo", "document"], ctx => {
//   //console.log(ctx.message);

//   if (!process.env.DISALLOW_WRITE) {
//     // –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É
//     if (ctx.message.photo) {
//       const lastImage = ctx.message.photo.length - 1;
//       if (
//         ctx.message.photo[lastImage].width < 200 ||
//         ctx.message.photo[lastImage].height < 200
//       ) {
//         ctx.reply(settings.bot.error.photo_small, menuKeyboard);
//       } else {
//         console.log(ctx.message.from.username);
//         console.log(ctx.message.photo[lastImage].file_id);
//         if (ctx.message.caption) {
//           console.log(ctx.message.caption);
//         }
//         ctx.reply("–°–ø–∞—Å–∏–±–æ!", menuKeyboard);
//       }
//     }
//     if (ctx.message.document) {
//       console.log(ctx.message);
//       if (
//         ctx.message.document.mime_type === "image/jpeg" ||
//         ctx.message.document.mime_type === "image/png" ||
//         ctx.message.document.mime_type === "image/jpg"
//       ) {
//         if (
//           ctx.message.document.thumb.width < 200 ||
//           ctx.message.document.thumb.width < 200
//         ) {
//           ctx.reply(settings.bot.error.photo_small, menuKeyboard);
//         } else {
//           ctx.reply("–°–ø–∞—Å–∏–±–æ!", menuKeyboard);
//         }
//       }
//     }
//   }
// });



rootScene.enter(ctx => {
  // console.log(ctx);
});

// help
rootScene.hears(settings.bot.keyboard.help, ctx => {
  // telegram.deleteMessage(ctx.chat.id, ctx.update.message.message_id);
  ctx.reply(settings.bot.help, menuKeyboard);
});
// why
rootScene.hears(settings.bot.keyboard.why, ctx => {
  // telegram.deleteMessage(ctx.chat.id, ctx.update.message.message_id);
  ctx.reply(settings.bot.why, menuKeyboard);
});

// C—Ç–∏–∫–µ—Ä –∏–ª–∏ –ö—É–±–∏–∫ :)
rootScene.hears("dice", ctx => ctx.replyWithDice(ctx.chat.id, menuKeyboard));
rootScene.on(["sticker"], ctx => ctx.reply("–ö—Ä—É—Ç–æ–π —Å—Ç–∏–∫–µ—Ä!", menuKeyboard));


rootScene.hears(settings.bot.keyboard.partiture, ctx =>
  ctx.scene.enter("sendVoice")
);
rootScene.command("start",ctx => ctx.scene.enter("greeter"));


rootScene.on("text", ctx => ctx.reply("–ö—Ä—É—Ç–æ! –Ω–æ —è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª",menuKeyboard));

bot.use(session(options));
bot.use(stage.middleware(options));

// bot.use(async (ctx, next) => {
//   const start = new Date();
//   await next();
//   const ms = new Date() - start;
//   console.log("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞ %sms", ms);
// });

// start
bot.start(ctx => ctx.scene.enter("greeter"));

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.startPolling();
bot.launch();

/// –°–µ—Ä–≤–µ—Ä
//bot.telegram.setWebhook('https://instinctive-autumn-velvet.glitch.me/secret-path')
// bot.telegram.startWebhook('/secret-path', null, 3000);

// https://expressjs.com/ru
// –°–µ—Ä–≤–µ—Ä

/// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get("/", (req, res) => {
  res.sendFile(`${__dirname}/views/mainpage.html`);
});

/// change voice to random —Ç—É—Ç –±–µ—Ä–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–π id –∏–∑ –±–∞–∑—ã  ->
/// –ø–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ getFileLink -> —Å–∫–∞—á–∏–≤–∞–µ–º download ->
/// –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ webm –∏ wav —á—Ç–æ –±—ã —É –≤—Å–µ—Ö –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ
app.get("/randomize", (req, res) => {
  db.each(settings.sql.randomVoice, (err, row) => {
    telegram.getFileLink(row.voice).then(voiceLink => {
      download(voiceLink, "public/voice.oga", () => {
        convert(settings.convert + "webm"); // –∫–æ–Ω–≤–µ—Ä—Ç –≤ webm, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –Ω–µ –ø–æ–Ω–∏–º–∞—é—Ç .oga
        convert(settings.convert + "wav"); // –¥–ª—è safari üôÅ
        res.send("ok!"); // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–∞–Ω–∫–∏ —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Åonvert –∏ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –∏—Ö –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
      });
    });
  });
});


/// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—Ç–∏—Ç—É—Ä—ã –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
/// –ß—Ç–æ –±—ã –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –Ω–∞–¥–æ –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ vpn —Ç–∞–∫ –∫–∞–∫
/// —Ç–∞–º –∏–¥–µ—Ç —Å–∫–∞—á–∏–≤–∞–µ–Ω–∏–µ –∏–∑ –∞–ø–∏ —Ç–µ–ª–µ–≥–∏ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –±—Ä–∞—É–∑–µ—Ä –æ–ø–µ—Ä–∞
app.get("/voices", (req, res) => {
  // console.log(req.headers);
  res.send("ok!");
});

app.get("/util", (req, res) => {
  // db.run("CREATE TABLE Paritures (id INTEGER PRIMARY KEY AUTOINCREMENT, image TEXT)");
  db.run("DROP TABLE IF EXISTS Paritures");
  res.send("ok!");
});

/// –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∞—É–¥–∏–æ ‚Äì‚Äì –º–æ–∂–Ω–æ —Å–∫–∞—á–∏–≤–∞—Ç—å –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
/// http://cangaceirojavascript.com.br/streaming-audio-node/
const buffer = settings.stream.buffer;

app.get("/audio", async (req, res) => {
  const filePath = `${__dirname}/public/voice.oga`;
  const stat = await getStat(filePath);
  //console.log(stat);

  // –í –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –∞—É–¥–∏–æ
  res.writeHead(200, {
    "Content-Type": "audio/oga",
    "Content-Length": stat.size
  });
  //
  const stream = fs.createReadStream(filePath, { buffer });

  // –í –∫–æ–Ω—Ü–µ –ø–∏—à–µ–º done
  stream.on("end", () => console.log("done"));

  // –°—Ç—Ä–∏–º–∏–º –∞—É–¥–∏–æ
  stream.pipe(res);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(process.env.PORT, () => {
  console.log(`Your app is listening on port ${process.env.PORT}`);
});
